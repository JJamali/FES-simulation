clear
clc

%% PARAMETERS

% Anthropometric measurements
global upper_leg_length lower_leg_length foot_length foot_mass resting_pa
upper_leg_length = ;
lower_leg_length = ;
foot_length = ;
foot_mass = ;
resting_pa = ;

% Electrical stimulation input function
global input_fun
input_fun = define_input_function();

%% SETUP

% Get trajectory regressions (create as global variables)
global knee_time_regression hip_time_regression
knee_time_regression = get_knee_time_regression;
hip_time_regression = get_hip_time_regression;

global knee_height_regression leg_angle_regression
[knee_height_regression,leg_angle_regression] = get_leg_trajectories(upper_leg_length,lower_leg_length);

% Get resting lengths
global resting_lm resting_lt
resting_lm = 0.5*lower_leg_length;
resting_lt = (1/3)*lower_leg_length;

global force_length_regression force_velocity_regression
force_length_regression = get_muscle_force_length_regression();
force_velocity_regression = get_muscle_force_velocity_regression();

global ta_origin_height
ta_origin_height = sqrt(((5/6)*lower_leg_length)^2 - (0.04)^2);

% From Buchanan et al, establishing activation function
global activation_fun f_max
A = -1.5; % Experimental parameter between -3 and 0
activation_fun = @(u) (exp(A*u)-1)/(exp(A)-1);



%% SIMULATION

f = @(t,x) mechanics(t,x);

tspan = [0 1];
initial_conditions = get_initial_conditions();
options = odeset('RelTol', 1e-6, 'AbsTol', 1e-8);

[t,y] = ode45(f,tspan,initial_conditions,options);

ankle_angle = y(:,1);


for i = 1:length(t)
    leg_angle = feval(leg_angle_regression,t(i));
    toe_height(i) = feval(knee_height_regression,t(i)) - ...
        lower_leg_length*sind(leg_angle) + ...
        foot_length*sind(leg_angle-ankle_angle(i));
end

%% PLOTS

plot_curves(t,x,toe_height);